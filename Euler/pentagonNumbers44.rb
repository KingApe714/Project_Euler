# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

def pentagons(n)
    
    arr = [];

    (9000..n).each do |i|
        p = i * (3 * i - 1) / 2
        arr << p
    end

    arr
end
#this function is really expensive and could use some optimizing.
#what if I stored the sums that are pentagonal numbers in a hash.
#as I grab difs that are pentagonal numbers I check to see if those difs are in the sum hash
#this would at least speed up the look up time.
def p_numbers(m)

    arr = pentagons(m)

    (0...arr.length - 1).each do |i|
        (i+1...arr.length).each do |j|
            p1 = arr[i]
            p2 = arr[j]
            sum = p1 + p2;
            dif = p2 - p1;
            if arr.include?(sum) && arr.include?(dif)
                return sum;
            end
        end
    end
end

p p_numbers(12000)